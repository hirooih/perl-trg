#! /usr/local/bin/perl
#
#	$Id: pftp,v 1.4 1997-03-26 16:06:47 hayashi Exp $
#
#	Copyright (c) 1997 Hiroo Hayashi.  All Rights Reserved.
#
#	This program is free software; you can redistribute it and/or
#	modify it under the same terms as Perl itself.

=head1 NAME

pftp - a ftp client with GNU Readline support

=head1 SYNOPSIS

B<pftp> [B<-d>] [B<-u>] [B<-g>] [B<-M>] [B<-h>] [I<host>]

=head1 DESCRIPTION

=head1 BUGS

command 'lcd' does not work.

multicolum ls

No document.

=cut

use Term::ReadLine;
use strict;
#use Net::Config;
use Net::Domain qw(hostdomain);
use Net::FTP;			# libnet-1.05 or later is recommended
use File::Listing;		# for parse_dir
use Getopt::Std;
#use Cwd 'chdir';

use vars qw($AUTOLOAD
	    $opt_d $opt_u $opt_g $opt_M $opt_h);

sub usage {
    print STDERR <<"EOM";
usage :	$0 [-d] [-i] [-u] [-g] [-M] [-h] host
	-d : debug mode
	-i : interactive mode (not implemented)
	-u : disable autologin
	-g : turn off glob
	-M : show manual page
	-h : show this message
EOM
    exit 0;
}

getopts('dugMh') or &usage;
&man if $opt_M;
&usage if $opt_h;

# setup Term::ReadLine::GNU
my $HOSTFILE = ($ENV{HOME} || (getpwuid($<))[7]) . "/.pftp_hosts";

my $term = Term::ReadLine->new('PFTP');
my $attribs = $term->Attribs;

my $host;
my @hosts = read_hosts($HOSTFILE);
if (@ARGV) {
    $host = shift;
} else {
    $attribs->{completion_word} = \@hosts;
    $attribs->{completion_append_character} = '';
    $attribs->{completion_entry_function} =
	$attribs->{'list_completion_function'};
    $host = $term->readline('hostname> ');
    $attribs->{completion_append_character} = ' ';
    $attribs->{completion_entry_function} = undef;
}

# make ftp connection
my $ftp = Net::FTP->new($host,
			Debug => $opt_d);
die "$0: cannot connect \`$host\'\n" unless $ftp;

print STDERR $ftp->message;
write_hosts($HOSTFILE, $host, @hosts);

if ($opt_u) {
    my $login = $term->readline('login name> ', 'anonymous');
    # Use Term::ReadKey!
    my $password = $term->readline('password> ',
				   (getpwuid($<))[0] . '@' . hostdomain);
    $ftp->login($login, $password);
    print STDERR $ftp->message;
} else {
    $ftp->login;
    print STDERR $ftp->message;
}

$ftp->binary;			# default binary
print STDERR $ftp->message;

my $pwd = $ftp->pwd;
print STDERR $ftp->message;

my @ftp_cmd_list = qw(cwd cd pwd ls dir get mget put mput lcd);

$attribs->{attempted_completion_function} = sub {
    my ($text, $line, $start, $end) = @_;
    if (substr($line, 0, $start) =~ /^\s*$/) {
	$attribs->{completion_word} = \@ftp_cmd_list;
	return $term->completion_matches($text,
					 $attribs->{'list_completion_function'});
    } elsif ($line =~ /^\s*(ls|dir|get|mget)\s/) {
	return $term->completion_matches($text,
					 \&ftp_filename_completion_function);
    } elsif ($line =~ /^\s*(cd|cwd)\s/) {
	return $term->completion_matches($text,
					 \&ftp_dirname_completion_function);
    } else {			# put mput lcd
	return ();
    }
};

$SIG{INT} = 'IGNORE';		# ignore Control-C

no strict 'refs';
while (defined($_ = $term->readline('pftp> '))) {
    next if /^\s*$/;
    my ($cmd, @args) = split(' ', $_);
    if ($cmd eq 'quit' || $cmd eq 'bye') {
	last;
    }
    my $func = "cmd_" . $cmd;
    &$func(@args);
    $attribs->{completion_append_character} = ' ';
}
use strict 'refs';
$ftp->quit;
print STDERR $ftp->message;

exit (0);

########################################################################
#	complete remote filename

sub ftp_filename_completion_function ( $$ ) {
    my($text, $state) = @_;
    ftp_completion_function($text, $state, 0);
}

sub ftp_dirname_completion_function ( $$ ) {
    my($text, $state) = @_;
    ftp_completion_function($text, $state, 1);
}

BEGIN {
    my ($i, $file, $dir, $fdir, $cw);

    sub ftp_completion_function ( $$$ ) {
	my($text, $state, $dironly) = @_;
	my $entry;

	unless ($state) {
	    $i = 0;		# clear counter at the first call
	    ($dir, $file) = ($text =~ m|(.*/)?(.*)$|);
	    $dir = '' unless defined $dir; # to piecify -w
	    $fdir = ($dir =~ m|^/|) ? $dir : "$pwd/$dir"; # full path name
	    $fdir =~ s|//|/|g;
	    $attribs->{completion_append_character} = ' ';
	    return undef unless defined ($cw = rdir($fdir));
	} else {
	    $i++;
	}
	for (; $i <= $#{$cw}; $i++) {
	    if (($entry = $cw->[$i]) =~ /^$file/
	        && !($dironly &&  ($entry !~ m|/$|))) {
		$attribs->{completion_append_character} = ''
		    if $entry =~ m|/$|;
		return ($dir . $entry);
	    }
	}
	return undef;
    }
}

########################################################################

sub AUTOLOAD {
    # tell a lie to Domain.pm
    goto &SYS_gethostname if $AUTOLOAD =~/SYS_gethostname$/;

    $AUTOLOAD =~ s/.*::cmd_//;
    warn "command \`$AUTOLOAD\' is not defined or not implemented.\n";
}

my %rdir;

sub rdir {		# get remote dir info and save it in %rdir
    my $dir = shift;
    return $rdir{$dir} if defined $rdir{$dir};

    my $d = $ftp->ls('-F', $dir);
    if ($d) {
	foreach (@{$d}) {
	    s|.*/(.)|\1|; # remove directory name  
	    s/[*@]$//;
	}
	return $rdir{$dir} = $d;
    } else {
	return undef;
    }
}

sub cmd_cwd {
    if ($ftp->cwd(@_)) {
	$pwd = $ftp->pwd();
    } else {
        print STDERR "cwd: cannot chdir to \`$_\'\n"
    }
    print STDERR $ftp->message;
}

# Why this does not work?
#*cmd_cd = \&cmd_cwd;

sub cmd_cd {
    &cmd_cwd;
}

sub cmd_pwd {
    $pwd = $ftp->pwd();
    if ($pwd) {
	print STDERR "$pwd\n";
    } else {
	print STDERR "pwd failed.\n";
    }
    print STDERR $ftp->message;
}

sub cmd_ls {
    # strip ls option
    return &cmd_dir if $_[0] =~ /^-/ && shift =~ /l/;

    my $dir = shift || $pwd;
    my $d = rdir($dir);
    if (defined $d) {
	foreach (sort @{$d}) {
	    print STDERR "$_\n";
	}
    } else {
	print STDERR "ls failed\n";
    }
    print STDERR $ftp->message;
}

sub cmd_dir {
    # strip ls option
    shift if $_[0] =~ /^-/;

    my $dir = $ftp->dir('-F', @_);
    print STDERR $ftp->message;

    my @dir;
    if ($dir) {
	foreach (@{$dir}) {
	    print STDERR "$_\n";

	    my $info = (parse_dir($_, '+0000'))[0]; # GMT
	    next unless $info;	# ignore if parse_dir() can not phase.
	    next if $$info[0] =~ m|^\.\.?/$|; # ignore '.' and '..'
	    $$info[0] =~ s|.*/(.)|\1|; # remove directory name
	    $$info[0] =~ s/[*@]$//;
	    push(@dir, $$info[0]);
	}
	$rdir{$pwd} = \@dir;
    } else {
	print STDERR "dir failed\n";
    }
}
    
sub cmd_get {
    $ftp->get(@_);
    print STDERR $ftp->message;
}

sub cmd_mget {
    if ($opt_g) {
	foreach (@_) {
	    $ftp->get($_);
	    print STDERR $ftp->message;
	}
    } else {
	my $d = $ftp->ls(@_);
	print STDERR $ftp->message;
	foreach (sort @{$d}) {
	    $ftp->get($_);
	    print STDERR $ftp->message;
	}
    }
}

sub cmd_put {
    $ftp->put(@_);
    print STDERR $ftp->message;
}

sub cmd_mput {
    my $f;
    foreach $f (@_) {
	foreach ($opt_g ? $f : glob $f) {
	    $ftp->put($_);
	    print STDERR $ftp->message;
	}
    }
}

sub cmd_lcd {
    chdir @_;
    chomp(my $pwd = `pwd`);
    printf STDERR "local current directory is \`%s\'\n", $pwd;

}

################################################################
sub read_hosts {
    my $file = shift;
    return () unless -f $file;
    open(F, $file) or die "$0: cannot open file \`$file\'\n";
    my @l = <F>;
    close(F);
    chomp @l;
    return @l;
}

sub write_hosts {
    my $file = shift;
    my $lastline = '';
    open(F, ">$file") or die "$0: cannot open file \`$file\'\n";
    foreach (sort @_) {
	print F ($_, "\n") if $_ ne $lastline;
	$lastline =  $_;
    }
    close(F);
}

################################################################
#	show man page
sub man {
    my $pager = $ENV{'PAGER'} || 'more';
    exec "pod2man $0|nroff -man|$pager";
    die "cannot exec pod2man, nroff, or $pager : $!\n";
}
